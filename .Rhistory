library(zoo)
library(ggplot2)
library(TTR)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
library(tidyr)
data_filtered <- data %>%
filter(short_name %in% c("Unternehmen1", "Unternehmen2")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
View(data_filtered)
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
correlation_window_size <- 10  # Größe des Moving Window für die Korrelation
data_correlation <- data_filtered %>%
group_by(short_name) %>%
mutate(correlation = rollapply(price, correlation_window_size, function(x) cor(x, na.rm = TRUE), align = "right", fill = NA))
rlang::last_trace()
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
correlation_window_size <- 10  # Größe des Moving Window für die Korrelation
data_correlation <- data_filtered %>%
group_by(short_name) %>%
mutate(correlation = rollapply(price, correlation_window_size, function(x) {
if (sum(!is.na(x)) > 1) {
cor(x, use = "complete.obs")
} else {
NA
}
}, align = "right", fill = NA))
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
# Annahme: data_filtered enthält bereits die vorbereiteten Daten
correlation_window_size <- 10  # Größe des Moving Window für die Korrelation
data_correlation <- data_filtered %>%
group_by(short_name) %>%
arrange(short_name, timestamp) %>%
mutate(correlation = rollapply(data_filtered$price, width = correlation_window_size, FUN = function(x) {
if (length(x) > 1) {
cor(x[1:correlation_window_size], x[correlation_window_size+1], use = "complete.obs")
} else {
NA
}
}, by.column = FALSE, align = "right", fill = NA))
View(data_filtered)
rlang::last_trace()
install.packages("crayon")
rlang::last_trace()
View(data_filtered)
library(dplyr)
library(zoo)
library(ggplot2)
library(TTR)
library(tidyr)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
data_filtered$timestamp <- as.POSIXct(data_filtered$timestamp, format = "%Y-%m-%d %H:%M:%S")
zoo_data <- zoo(data_filtered$price, order.by = data_filtered$timestamp)
window_size <- as.difftime(4, units = "hours")
correlation <- rollapply(zoo_data, width = window_size, FUN = function(x) cor(x["AEFES"], x["AKBNK"], use = "complete.obs"), by = "15 mins", align = "right")
library(dplyr)
library(zoo)
library(ggplot2)
library(TTR)
library(tidyr)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
data_filtered$timestamp <- as.POSIXct(data_filtered$timestamp, format = "%Y-%m-%d %H:%M:%S")
zoo_data <- zoo(data_filtered$price, order.by = data_filtered$timestamp)
window_size <- as.difftime(4, units = "hours")
correlation1 <- rollapply(zoo_data, width = window_size, FUN = function(x) cor(x["AEFES"], x["AKBNK"], use = "complete.obs"), by = "15 mins", align = "right")
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
data_filtered$timestamp <- as.POSIXct(data_filtered$timestamp, format = "%Y-%m-%d %H:%M:%S")
zoo_data <- zoo(data_filtered$price, order.by = data_filtered$timestamp)
window_size <- as.difftime(4, units = "hours")
correlation1 <- rollapply(zoo_data, width = window_size, FUN = function(x) cor(x["AEFES"], x["AKBNK"], use = "complete.obs"), by = "15 mins", align = "right")
library(dplyr)
library(zoo)
library(ggplot2)
library(TTR)
library(tidyr)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
# Konvertiere die Timestamps in ein korrektes Format
data_filtered$timestamp <- as.POSIXct(data_filtered$timestamp, format = "%Y-%m-%d %H:%M:%S")
# Erstelle eine zoo-Zeitreihe
zoo_data <- zoo(data_filtered$price, order.by = data_filtered$timestamp)
# Definiere die Größe des Moving Windows in Sekunden
window_size <- 4 * 3600  # 4 Stunden in Sekunden
# Berechne die Moving Window Correlation für AEFES und AKBNK
correlation <- rollapply(zoo_data, width = window_size, FUN = function(x) cor(x["AEFES"], x["AKBNK"], use = "complete.obs"), by = 900, align = "right")
library(dplyr)
library(zoo)
library(ggplot2)
library(TTR)
library(tidyr)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
# Konvertiere die Timestamps in ein korrektes Format
data_filtered$timestamp <- as.POSIXct(data_filtered$timestamp, format = "%Y-%m-%d %H:%M:%S")
# Erstelle eine zoo-Zeitreihe
zoo_data <- zoo(data_filtered$price, order.by = data_filtered$timestamp)
# Definiere die Größe des Moving Windows in Sekunden
window_size <- 4 * 3600  # 4 Stunden in Sekunden
# Berechne die Moving Window Correlation für AEFES und AKBNK
correlation <- rollapply(zoo_data, width = window_size, FUN = function(x) {
# Entferne fehlende Werte aus dem Fenster
x <- na.omit(x)
# Berechne die Korrelation, wenn genügend Datenpunkte vorhanden sind
if (length(x) >= 2) {
cor(x["AEFES"], x["AKBNK"])
} else {
NA  # Wenn nicht genügend Daten vorhanden sind, gib NA zurück
}
}, by = 900, align = "right")
# Erstelle einen Dataframe mit den Ergebnissen der Moving Window Correlation
correlation_df <- data.frame(timestamp = time(correlation), correlation = coredata(correlation))
# Erstelle einen Graphen
ggplot(correlation_df, aes(x = timestamp, y = correlation)) +
geom_line() +
labs(title = "Moving Window Correlation zwischen AEFES und AKBNK",
x = "Zeitstempel",
y = "Korrelation") +
theme_minimal()
library(dplyr)
library(zoo)
library(ggplot2)
library(TTR)
library(tidyr)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
# Konvertiere die Timestamps in ein korrektes Format
data_filtered$timestamp <- as.POSIXct(data_filtered$timestamp, format = "%Y-%m-%d %H:%M:%S")
# Erstelle eine zoo-Zeitreihe
zoo_data <- zoo(data_filtered$price, order.by = data_filtered$timestamp)
# Definiere die Größe des Moving Windows in Sekunden
window_size <- 4 * 3600  # 4 Stunden in Sekunden
# Berechne die Moving Window Correlation für AEFES und AKBNK
correlation <- rollapply(zoo_data, width = window_size, FUN = function(x) {
# Entferne fehlende Werte aus dem Fenster
x <- na.omit(x)
# Überprüfe, ob genügend Datenpunkte vorhanden sind
if (length(x) >= 2) {
cor(x["AEFES"], x["AKBNK"])
} else {
NA  # Wenn nicht genügend Daten vorhanden sind, gib NA zurück
}
}, by = 900, align = "right")
# Erstelle einen Dataframe mit den Ergebnissen der Moving Window Correlation
correlation_df <- data.frame(timestamp = time(correlation), correlation = coredata(correlation))
# Filtere Zeilen mit NA-Korrelationswerten aus
correlation_df <- correlation_df[!is.na(correlation_df$correlation), ]
# Erstelle einen Graphen
ggplot(correlation_df, aes(x = timestamp, y = correlation)) +
geom_line() +
labs(title = "Moving Window Correlation zwischen AEFES und AKBNK",
x = "Zeitstempel",
y = "Korrelation") +
theme_minimal()
library(dplyr)
library(zoo)
library(ggplot2)
library(TTR)
library(tidyr)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
# Konvertiere die Timestamps in ein korrektes Format
data_filtered$timestamp <- as.POSIXct(data_filtered$timestamp, format = "%Y-%m-%d %H:%M:%S")
# Erstelle eine zoo-Zeitreihe
zoo_data <- zoo(data_filtered$price, order.by = data_filtered$timestamp)
# Definiere die Größe des Moving Windows in Sekunden
window_size <- 10 * 3600  # 10 Stunden in Sekunden
# Berechne die Moving Window Correlation für AEFES und AKBNK
correlation <- rollapply(zoo_data, width = window_size, FUN = function(x) {
# Entferne fehlende Werte aus dem Fenster
x <- na.omit(x)
# Überprüfe, ob genügend Datenpunkte vorhanden sind
if (length(x) >= 2) {
cor(x["AEFES"], x["AKBNK"])
} else {
NA  # Wenn nicht genügend Daten vorhanden sind, gib NA zurück
}
}, by = 900, align = "right")
# Erstelle einen Dataframe mit den Ergebnissen der Moving Window Correlation
correlation_df <- data.frame(timestamp = time(correlation), correlation = coredata(correlation))
# Filtere Zeilen mit NA-Korrelationswerten aus
correlation_df <- correlation_df[!is.na(correlation_df$correlation), ]
# Erstelle einen Graphen
ggplot(correlation_df, aes(x = timestamp, y = correlation)) +
geom_line() +
labs(title = "Moving Window Correlation zwischen AEFES und AKBNK",
x = "Zeitstempel",
y = "Korrelation") +
theme_minimal()
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
# Gruppiere die Daten nach Timestamp und Unternehmen
grouped_data <- data_filtered %>%
group_by(timestamp, short_name) %>%
summarise(price = mean(price, na.rm = TRUE)) %>%
ungroup()
# Konvertiere die Timestamps in ein korrektes Format
grouped_data$timestamp <- as.POSIXct(grouped_data$timestamp, format = "%Y-%m-%d %H:%M:%S")
# Erstelle eine zoo-Zeitreihe
zoo_data <- zoo(grouped_data$price, order.by = grouped_data$timestamp)
# Definiere die Größe des Moving Windows in Sekunden
window_size <- 10 * 3600  # 10 Stunden in Sekunden
# Berechne die Moving Window Correlation für AEFES und AKBNK
correlation <- rollapply(zoo_data, width = window_size, FUN = function(x) {
# Entferne fehlende Werte aus dem Fenster
x <- na.omit(x)
# Überprüfe, ob genügend Datenpunkte vorhanden sind
if (length(x) >= 2) {
cor(x["AEFES"], x["AKBNK"])
} else {
NA  # Wenn nicht genügend Daten vorhanden sind, gib NA zurück
}
}, by = 900, align = "right")
# Erstelle einen Dataframe mit den Ergebnissen der Moving Window Correlation
correlation_df <- data.frame(timestamp = time(correlation), correlation = coredata(correlation))
# Filtere Zeilen mit NA-Korrelationswerten aus
correlation_df <- correlation_df[!is.na(correlation_df$correlation), ]
# Erstelle einen Graphen
ggplot(correlation_df, aes(x = timestamp, y = correlation)) +
geom_line() +
labs(title = "Moving Window Correlation zwischen AEFES und AKBNK",
x = "Zeitstempel",
y = "Korrelation") +
theme_minimal()
library(dplyr)
library(zoo)
library(ggplot2)
library(TTR)
library(tidyr)
#data_A <- subset(data, short_name == "AEFES")
#data_B <- subset(data, short_name == "AKBNK")
#data_A <- data_A %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#data_B <- data_B %>%
# group_by(year_month = format(as.Date(timestamp), "%Y-%m")) %>%
#summarize(avg_price = mean(price, na.rm = TRUE))
#unternehmenA <- data[data$short_name == "AEFES", ]
#unternehmenB <- data[data$short_name == "AKBNK", ]
# Annahme: Du möchtest die Moving Window Correlation für die Unternehmen "Unternehmen1" und "Unternehmen2" durchführen.
data_filtered <- data %>%
filter(short_name %in% c("AEFES", "AKBNK")) %>%
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%dT%H:%M:%SZ")) %>%
arrange(short_name, timestamp) %>%
complete(timestamp = seq.POSIXt(min(timestamp), max(timestamp), by = "15 min")) %>%
tidyr::fill(price)  # Hier wird explizit angegeben, dass die Funktion aus dem "tidyr"-Paket stammt.
# Gruppiere die Daten nach Timestamp und Unternehmen
grouped_data <- data_filtered %>%
group_by(timestamp, short_name) %>%
summarise(price = mean(price, na.rm = TRUE)) %>%
ungroup()
# Konvertiere die Timestamps in ein korrektes Format
grouped_data$timestamp <- as.POSIXct(grouped_data$timestamp, format = "%Y-%m-%d %H:%M:%S")
# Erstelle eine zoo-Zeitreihe
zoo_data <- zoo(grouped_data$price, order.by = grouped_data$timestamp)
# Definiere die Größe des Moving Windows in Sekunden
window_size <- 10 * 3600  # 10 Stunden in Sekunden
# Berechne die Moving Window Correlation für AEFES und AKBNK
correlation <- rollapply(zoo_data, width = window_size, FUN = function(x) {
# Entferne fehlende Werte aus dem Fenster
x <- na.omit(x)
# Überprüfe, ob genügend Datenpunkte vorhanden sind
if (length(x) >= 2) {
cor(x["AEFES"], x["AKBNK"])
} else {
NA  # Wenn nicht genügend Daten vorhanden sind, gib NA zurück
}
}, by = 900, align = "right")
# Erstelle einen Dataframe mit den Ergebnissen der Moving Window Correlation
correlation_df <- data.frame(timestamp = time(correlation), correlation = coredata(correlation))
# Filtere Zeilen mit NA-Korrelationswerten aus
correlation_df <- correlation_df[!is.na(correlation_df$correlation), ]
# Erstelle einen Graphen
ggplot(correlation_df, aes(x = timestamp, y = correlation)) +
geom_line() +
labs(title = "Moving Window Correlation zwischen AEFES und AKBNK",
x = "Zeitstempel",
y = "Korrelation") +
theme_minimal()
View(data)
View(data_filtered)
View(data)
# Laden Sie die benötigten Bibliotheken
library(dplyr)
library(FactoMineR)
#Installieren der benötigten Bibliotheken
install.packages("FactoMiner")
#Installieren der benötigten Bibliotheken
install.packages("FactoMineR")
install.packages("readr")
# Laden Sie die benötigten Bibliotheken
library(dplyr)
library(FactoMineR)
library(readr)
# Laden Sie Ihren Datensatz
df <- read_csv("C:/Users/kaand/OneDrive/Desktop/Bogazici Courses/IE 582/Homework 1/all_ticks_long.csv/all_ticks_long.csv")
View(df)
# Entfernen Sie NA-Werte
df <- df %>% na.omit()
# Entfernen Sie die Spalten "short_name" und "timestamp", wenn sie für die PCA nicht relevant sind
df <- df %>% select(price)
# Skalieren Sie die Daten
df_scaled <- scale(df)
# Führen Sie die PCA durch
pca_result <- PCA(df_scaled, graph = FALSE)
# Zeigen Sie die Varianz erklärt durch die Hauptkomponenten an
pca_result$eig
# Bestimmen Sie, wie viele Hauptkomponenten Sie behalten möchten
cumulative_var <- cumsum(pca_result$eig$variance.percent)
# Laden Sie die benötigten Bibliotheken
library(dplyr)
library(FactoMineR)
library(readr)
# Laden Sie Ihren Datensatz
df <- read_csv("C:/Users/kaand/OneDrive/Desktop/Bogazici Courses/IE 582/Homework 1/all_ticks_long.csv/all_ticks_long.csv")
# Entfernen Sie NA-Werte
df <- df %>% na.omit()
# Skalieren Sie die Daten
df_scaled <- scale(df)
View(data_A)
View(data_filtered)
# install.packages("devtools")
devtools::install_github("lbusett/insert_table")
install.packages("devtools")
devtools::install_github("lbusett/insert_table")
> insert_table(tbl_name = "Dataset", nrows = 3, ncols = 3, tbl_format = "DT")
insert_table(tbl_name = "Dataset", nrows = 3, ncols = 3, tbl_format = "DT")
| short_name | timestamp | price |
| short_name | timestamp | price |
View(grouped_data)
View(summary_data)
View(result2)
View(grouped_data)
library(dplyr)
grouped_data <- data %>%
group_by(short_name)
#Wenden Sie die summary() Funktion auf jede Gruppe an
summary_data <- grouped_data %>%
summarize(
Mean_Price = mean(price, na.rm = TRUE),
Median_Price = median(price, na.rm = TRUE)
)
#Anzeigen der Zusammenfassung
print(summary_data)
print(summary_data, n=60)
View(data)
# measures of shape
install.packages("e1071")
library(dplyr)
library(e1071)
result3 <- grouped_data %>%
summarize(
Skewness = skewness(price, na.rm = TRUE),
Kurtosis = kurtosis(price, na.rm = TRUE)
)
print(result3, n=60)
View(result3)
View(grouped_data)
View(grouped_data)
View(grouped_data)
library(ggplot2)
library(dplyr)
ggplot(grouped_data, aes(x = price)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Histogramm der Preise", x = "Preis", y = "Häufigkeit")
library(ggplot2)
library(dplyr)
ggplot(grouped_data, aes(x = price)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Histogramm der Preise", x = "Preis", y = "Häufigkeit")
ggplot(grouped_data, aes(x = price)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Histogram", x = "price", y = "frequency")
ggplot(grouped_data, aes(x = price)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
labs(title = "Histogram", x = "price", y = "frequency")
View(data2)
View(grouped_data)
View(data2)
